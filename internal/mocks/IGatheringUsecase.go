// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hieronimusbudi/simple-go-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// IGatheringUsecase is an autogenerated mock type for the IGatheringUsecase type
type IGatheringUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, gathering
func (_m *IGatheringUsecase) Create(ctx context.Context, gathering domain.Gathering) (domain.Gathering, error) {
	ret := _m.Called(ctx, gathering)

	var r0 domain.Gathering
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Gathering) (domain.Gathering, error)); ok {
		return rf(ctx, gathering)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Gathering) domain.Gathering); ok {
		r0 = rf(ctx, gathering)
	} else {
		r0 = ret.Get(0).(domain.Gathering)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Gathering) error); ok {
		r1 = rf(ctx, gathering)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, args
func (_m *IGatheringUsecase) Delete(ctx context.Context, args domain.GatheringArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GatheringArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, args
func (_m *IGatheringUsecase) Get(ctx context.Context, args domain.GatheringArgs) ([]domain.Gathering, error) {
	ret := _m.Called(ctx, args)

	var r0 []domain.Gathering
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GatheringArgs) ([]domain.Gathering, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GatheringArgs) []domain.Gathering); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Gathering)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GatheringArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IGatheringUsecase) GetByID(ctx context.Context, id int64) (domain.Gathering, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Gathering
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Gathering, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Gathering); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Gathering)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, gathering
func (_m *IGatheringUsecase) Update(ctx context.Context, gathering domain.Gathering) error {
	ret := _m.Called(ctx, gathering)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Gathering) error); ok {
		r0 = rf(ctx, gathering)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIGatheringUsecase creates a new instance of IGatheringUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIGatheringUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IGatheringUsecase {
	mock := &IGatheringUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
