// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/hieronimusbudi/simple-go-api/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// IMemberUsecase is an autogenerated mock type for the IMemberUsecase type
type IMemberUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, member
func (_m *IMemberUsecase) Create(ctx context.Context, member domain.Member) (domain.Member, error) {
	ret := _m.Called(ctx, member)

	var r0 domain.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Member) (domain.Member, error)); ok {
		return rf(ctx, member)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Member) domain.Member); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Get(0).(domain.Member)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Member) error); ok {
		r1 = rf(ctx, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, args
func (_m *IMemberUsecase) Delete(ctx context.Context, args domain.MemberArgs) error {
	ret := _m.Called(ctx, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MemberArgs) error); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, args
func (_m *IMemberUsecase) Get(ctx context.Context, args domain.MemberArgs) ([]domain.Member, error) {
	ret := _m.Called(ctx, args)

	var r0 []domain.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MemberArgs) ([]domain.Member, error)); ok {
		return rf(ctx, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.MemberArgs) []domain.Member); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.MemberArgs) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *IMemberUsecase) GetByID(ctx context.Context, id int64) (domain.Member, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Member, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Member); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Member)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, member
func (_m *IMemberUsecase) Update(ctx context.Context, member domain.Member) error {
	ret := _m.Called(ctx, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Member) error); ok {
		r0 = rf(ctx, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMemberUsecase creates a new instance of IMemberUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMemberUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMemberUsecase {
	mock := &IMemberUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
